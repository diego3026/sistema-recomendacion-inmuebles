Index: inmobiliaria/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from rest_framework import viewsets, status\r\nfrom rest_framework.decorators import action\r\nfrom rest_framework.permissions import AllowAny\r\nfrom rest_framework.response import Response\r\nfrom rest_framework.views import APIView\r\nfrom rest_framework_simplejwt.tokens import RefreshToken\r\n\r\nfrom .permissions import IsSuperUser\r\nfrom .serializers import *\r\nfrom .models import *\r\n\r\nclass PaisViewSet(viewsets.ModelViewSet):\r\n    queryset = Pais.objects.all()\r\n    serializer_class = PaisSerializer\r\n\r\n    @action(detail=True, methods=['delete'],permission_classes=[IsSuperUser])\r\n    def delete(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        self.perform_destroy(instance)\r\n        return Response(data={'status': 'pais deleted'}, status=status.HTTP_204_NO_CONTENT)\r\n\r\n    permission_classes = [IsSuperUser]\r\n    def update(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        serializer = self.get_serializer(instance, data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        self.perform_update(serializer)\r\n        return Response(serializer.data)\r\n\r\nclass CiudadViewSet(viewsets.ModelViewSet):\r\n    queryset = Ciudad.objects.all()\r\n    serializer_class = CiudadSerializer\r\n\r\n    # Agregar acción delete\r\n    @action(detail=True, methods=['delete'],permission_classes=[IsSuperUser])\r\n    def delete(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        self.perform_destroy(instance)\r\n        return Response({'status': 'ciudad deleted'}, status=status.HTTP_204_NO_CONTENT)\r\n    \r\n    permission_classes = [IsSuperUser]\r\n    def update(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        serializer = self.get_serializer(instance, data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        self.perform_update(serializer)\r\n        return Response(serializer.data)\r\n\r\n\r\nclass SectorViewSet(viewsets.ModelViewSet):\r\n    queryset = Sector.objects.all()\r\n    serializer_class = SectorSerializer\r\n\r\n    @action(detail=True, methods=['delete'],permission_classes=[IsSuperUser])\r\n    def delete(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        self.perform_destroy(instance)\r\n        return Response({'status': 'sector deleted'}, status=status.HTTP_204_NO_CONTENT)\r\n    \r\n    permission_classes = [IsSuperUser]\r\n    def update(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        serializer = self.get_serializer(instance, data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        self.perform_update(serializer)\r\n        return Response(serializer.data)\r\n\r\n\r\nclass TipoDeCaracteristicaViewSet(viewsets.ModelViewSet):\r\n    queryset = TipoDeCaracteristica.objects.all()\r\n    serializer_class = TipoDeCaracteristicaSerializer\r\n\r\n    # Agregar acción delete\r\n    @action(detail=True, methods=['delete'],permission_classes=[IsSuperUser])\r\n    def delete(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        self.perform_destroy(instance)\r\n        return Response({'status': 'tipo de característica deleted'}, status=status.HTTP_204_NO_CONTENT)\r\n    \r\n    permission_classes = [IsSuperUser]\r\n    def update(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        serializer = self.get_serializer(instance, data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        self.perform_update(serializer)\r\n        return Response(serializer.data)\r\n\r\n\r\n\r\nclass UsuarioViewSet(viewsets.ModelViewSet):\r\n    queryset = Usuario.objects.all()\r\n    serializer_class = UsuarioSerializer\r\n\r\n    # Agregar acción delete\r\n    @action(detail=True, methods=['delete'],permission_classes=[IsSuperUser])\r\n    def delete(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        self.perform_destroy(instance)\r\n        return Response({'status': 'usuario deleted'}, status=status.HTTP_204_NO_CONTENT)\r\n\r\n    permission_classes = [IsSuperUser]\r\n    def update(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        serializer = self.get_serializer(instance, data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        self.perform_update(serializer)\r\n        return Response(serializer.data)\r\n\r\nclass CaracteristicaViewSet(viewsets.ModelViewSet):\r\n    queryset = Caracteristica.objects.all()\r\n    serializer_class = CaracteristicaSerializer\r\n\r\n    # Agregar acción delete\r\n    @action(detail=True, methods=['delete'],permission_classes=[IsSuperUser])\r\n    def delete(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        self.perform_destroy(instance)\r\n        return Response({'status': 'caracteristica deleted'}, status=status.HTTP_204_NO_CONTENT)\r\n\r\n    permission_classes = [IsSuperUser]\r\n    def update(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        serializer = self.get_serializer(instance, data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        self.perform_update(serializer)\r\n        return Response(serializer.data)\r\n\r\n\r\nclass RegisterAPIView(APIView):\r\n    permission_classes = [AllowAny]\r\n\r\n    @action(detail=False, methods=['post'])\r\n    def post(self, request):\r\n        serializer = UsuarioRegisterSerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            user = Usuario.objects.create_user(\r\n                email=serializer.data['email'],\r\n                nombre=serializer.data['nombre'],\r\n                apellido=serializer.data['apellido'],\r\n                username=serializer.data['username'],\r\n                edad=serializer.data['edad'],\r\n                password=serializer.data['password']\r\n            )\r\n            if user:\r\n                refresh = RefreshToken.for_user(user)\r\n                return Response({\r\n                    'refresh': str(refresh),\r\n                    'access': str(refresh.access_token),\r\n                }, status=status.HTTP_201_CREATED)\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\nclass LoginAPIView(APIView):\r\n    permission_classes = [AllowAny]\r\n    queryset = Usuario.objects.all().values('username', 'password')\r\n\r\n    @action(detail=True, methods=['post'])\r\n    def post(self, request):\r\n        serializer = UsuarioLoginSerializer(data=request.data)\r\n        if serializer.is_valid():\r\n            username = serializer.validated_data['username']\r\n            password = serializer.validated_data['password']\r\n            try:\r\n                user = Usuario.objects.get(username=username)\r\n                if user.check_password(password):\r\n                    refresh = RefreshToken.for_user(user)\r\n                    return Response({\r\n                        'refresh': str(refresh),\r\n                        'access': str(refresh.access_token),\r\n                    }, status=status.HTTP_200_OK)\r\n                else:\r\n                    return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)\r\n            except Usuario.DoesNotExist:\r\n                return Response({'error': 'User not found'}, status=status.HTTP_404_NOT_FOUND)\r\n\r\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\r\n\r\n\r\nclass TipoDeInmuebleViewSet(viewsets.ModelViewSet):\r\n    queryset = TipoDeInmueble.objects.all()\r\n    serializer_class = TipoDeInmuebleSerializer\r\n\r\n    # Agregar acción delete\r\n    @action(detail=True, methods=['delete'],permission_classes=[IsSuperUser])\r\n    def delete(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        self.perform_destroy(instance)\r\n        return Response({'status': 'tipo de inmueble deleted'}, status=status.HTTP_204_NO_CONTENT)\r\n    \r\n    permission_classes = [IsSuperUser]\r\n    def update(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        serializer = self.get_serializer(instance, data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        self.perform_update(serializer)\r\n        return Response(serializer.data)\r\n\r\nimport logging\r\n\r\nlogger = logging.getLogger(__name__)\r\nclass InmuebleViewSet(viewsets.ModelViewSet):\r\n    queryset = Inmueble.objects.all()\r\n    serializer_class = InmuebleSerializer\r\n    @action(detail=True, methods=['delete'],permission_classes=[IsSuperUser])\r\n    def delete(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        self.perform_destroy(instance)\r\n        return Response({'status': 'inmueble deleted'}, status=status.HTTP_204_NO_CONTENT)\r\n    \r\n    permission_classes = [IsSuperUser]\r\n    def update(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        serializer = self.get_serializer(instance, data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        self.perform_update(serializer)\r\n        return Response(serializer.data)\r\n\r\n\r\nclass InmueblePorUsuarioViewSet(viewsets.ModelViewSet):\r\n    queryset = InmueblePorUsuario.objects.all()\r\n    serializer_class = InmueblePorUsuarioSerializer\r\n\r\n    # Agregar acción delete\r\n    @action(detail=True, methods=['delete'],permission_classes=[IsSuperUser])\r\n    def delete(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        self.perform_destroy(instance)\r\n        return Response({'status': 'inmueble por usuario deleted'}, status=status.HTTP_204_NO_CONTENT)\r\n    \r\n    permission_classes = [IsSuperUser]\r\n    def update(self, request, *args, **kwargs):\r\n        instance = self.get_object()\r\n        serializer = self.get_serializer(instance, data=request.data)\r\n        serializer.is_valid(raise_exception=True)\r\n        self.perform_update(serializer)\r\n        return Response(serializer.data)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/inmobiliaria/views.py b/inmobiliaria/views.py
--- a/inmobiliaria/views.py	(revision 53a4d7afd4bd70758b693554db7ee49a6eca272a)
+++ b/inmobiliaria/views.py	(date 1713902611888)
@@ -1,7 +1,6 @@
 from rest_framework import viewsets, status
 from rest_framework.decorators import action
 from rest_framework.permissions import AllowAny
-from rest_framework.response import Response
 from rest_framework.views import APIView
 from rest_framework_simplejwt.tokens import RefreshToken
 
